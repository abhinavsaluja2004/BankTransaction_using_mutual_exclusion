# Directory for test cases
$TEST_DIR = "tests"
# Directory for results (using the workload specific name)
$RESULTS_DIR = "results_workload"
# Name of the optimized algorithm's main file
$OPTIMIZED_MAIN = "main_updated.go"
# Name of the metrics file generated by the optimized algorithm
$OPTIMIZED_METRICS_FILE = "metrics_optimized.json"
# Name of the visualization script (using the workload specific name)
$VISUALIZE_SCRIPT = "visualize_metrics_workloads.py"

# Create results directory if it doesn't exist
if (!(Test-Path -Path $RESULTS_DIR)) {
    Write-Host "Creating results directory: $RESULTS_DIR"
    New-Item -ItemType Directory -Path $RESULTS_DIR | Out-Null
}

# Function to run tests for a single test case using the optimized algorithm
function Run-OptimizedTest {
    param (
        [string]$testCase
    )

    $testPath = Join-Path -Path $TEST_DIR -ChildPath $testCase
    $resultPath = Join-Path -Path $RESULTS_DIR -ChildPath $testCase

    Write-Host "Running optimized algorithm for test case: $testCase"

    # Create test case specific result directory if it doesn't exist
    if (!(Test-Path -Path $resultPath)) {
        Write-Host " Creating test case result directory: $resultPath"
        New-Item -ItemType Directory -Path $resultPath | Out-Null
    }

    # Define the expected path for the metrics file after running the Go program
    $metricsSourcePath = Join-Path -Path (Get-Location) -ChildPath $OPTIMIZED_METRICS_FILE
    # Define the destination path for the metrics file
    $metricsDestinationPath = Join-Path -Path $resultPath -ChildPath $OPTIMIZED_METRICS_FILE

    # Run the optimized algorithm
    Write-Host "  Running ${OPTIMIZED_MAIN}..." # Using ${} for clarity
    try {
        go run ${OPTIMIZED_MAIN} ${testPath} "optimized" # Using ${} for clarity
        # Check if the metrics file was created before trying to move it
        if (Test-Path -Path $metricsSourcePath) {
            Move-Item -Path $metricsSourcePath -Destination $metricsDestinationPath -Force
            Write-Host "  Metrics saved to ${metricsDestinationPath}" # Using ${} for clarity
        } else {
            Write-Warning "  Metrics file '${OPTIMIZED_METRICS_FILE}' not found after running ${OPTIMIZED_MAIN} for ${testCase}." # Using ${} for clarity
        }
    } catch {
        # Assign the error message to a variable to avoid parsing issues
        $errorMessage = $_.Exception.Message
        # Use ${} to explicitly delimit the variable name in the string
        Write-Error "  Error running ${OPTIMIZED_MAIN} for ${testCase}: ${errorMessage}"
    }

    Write-Host "Test case ${testCase} processing completed." # Using ${} for clarity
    Write-Host "----------------------------------------"
}

# --- Main Execution ---

# If a specific test case is provided as an argument, run only that one
if ($args.Count -eq 1) {
    $specificTestCase = $args[0]
    $specificTestPath = Join-Path -Path $TEST_DIR -ChildPath $specificTestCase
    if (Test-Path -Path $specificTestPath -ItemType Directory) {
        Run-OptimizedTest -testCase $specificTestCase
    } else {
        Write-Error "Test case directory '${specificTestCase}' not found in '${TEST_DIR}'." # Using ${} for clarity
        exit 1
    }
} else {
    # Run all test cases found in the test directory
    $testCases = Get-ChildItem -Path $TEST_DIR -Directory
    if ($testCases.Count -eq 0) {
        Write-Warning "No test case directories found in '${TEST_DIR}'. Nothing to run." # Using ${} for clarity
    } else {
        foreach ($testCase in $testCases) {
            Run-OptimizedTest -testCase $testCase.Name
        }
    }
}

# After running all test cases, generate visualizations comparing them
Write-Host "All test case runs completed. Generating comparison visualizations..."

# The visualization script will now read from the main RESULTS_DIR
# It will look for metrics_optimized.json in each subdirectory (test case)
try {
    # Construct the full path to the visualization script if it's not in the PATH
    # You might need to adjust this line based on where visualize_metrics_workloads.py is located
    # Example: $visualizeScriptPath = "C:\path\to\your\scripts\visualize_metrics_workloads.py"
    # Then use: python $visualizeScriptPath $RESULTS_DIR $RESULTS_DIR
    python ${VISUALIZE_SCRIPT} ${RESULTS_DIR} ${RESULTS_DIR} # Using ${} for clarity
    Write-Host "Comparison visualizations generated in ${RESULTS_DIR}" # Using ${} for clarity
} catch {
    $errorMessage = $_.Exception.Message
    # Use ${} to explicitly delimit the variable name in the string
    Write-Error "Error running the visualization script: ${errorMessage}"
    Write-Host "Please ensure '${VISUALIZE_SCRIPT}' exists and is in your PATH, or provide the full path." # Using ${} for clarity
}

Write-Host "Script finished."
